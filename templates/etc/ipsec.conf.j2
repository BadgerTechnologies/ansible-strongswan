# /etc/ipsec.conf - strongSwan IPsec configuration file

config setup
{% if config_setup_cachecrls is defined  %}
  cachecrls=yes
{% else %}
  cachecrls=no
{% endif %}
{% if config_setup_uniqueids is defined  %}
  uniqueids=yes
{% else %}
  uniqueids=no
{% endif %}
{% if config_setup_charondebug is defined  %}
    charondebug={{ config_setup_charondebug }} 
{% endif %}

conn %default
{% if conn_default_ikelifetime is defined  %}
  # How long the keying channel of a connection (ISAKMP or IKE SA) should last before being renegotiated.
  ikelifetime={{ conn_default_ikelifetime }}
{% endif %}
{% if conn_default_lifetime is defined  %}
  # How long a particular instance of a connection (a set of encryption/authentication keys for user packets) should last, from successful negotiation to expiry.
  lifetime={{ conn_default_lifetime }}
{% endif %}
{% if conn_default_margintime is defined  %}
  # How long a particular instance of a connection (a set of encryption/authentication keys for user packets) should last, from successful negotiation to expiry.
  margintime={{ conn_default_margintime }}
{% endif %}
{% if conn_default_keyingtries is defined  %}
  # How many attempts (a positive integer or %forever) should be made to negotiate a connection, or a replacement for one, before giving up (default 3).
  keyingtries={{ conn_default_keyingtries }}
{% endif %}
{% if conn_default_authby is defined  %}
  # How the two security gateways should authenticate each other
  authby={{ conn_default_authby }}
{% endif %}
{% if conn_default_keyexchange is defined  %}
  # Method of key exchange; which protocol should be used to initialize the connection.
  keyexchange={{ conn_default_keyexchange }}
{% endif %}
  # Enables the IKEv2 MOBIKE protocol defined by RFC 4555.
{% if conn_default_mobike is defined  %}
  mobike=yes
{% else %}
  mobike=no
{% endif %}

{% for connitem in strongswan_conn %}
conn {{ connitem.name }}
{% if connitem.dpdaction is defined %}
  # controls the use of the Dead Peer Detection protocol (DPD, RFC 3706)
  dpdaction={{ connitem.dpdaction }}
{% endif %}
{% if connitem.dpddelay is defined %}
  # defines the period time interval with which R_U_THERE messages/INFORMATIONAL exchanges are sent to the peer.
  dpddelay={{ connitem.dpddelay }}
{% endif %}
{% if connitem.dpdtimeout is defined %}
  # defines the timeout interval, after which all connections to a peer are deleted in case of inactivity.
  dpdtimeout={{ connitem.dpdtimeout }}
{% endif %}
{% if connitem.inactivity is defined %}
  # defines the timeout interval, after which all connections to a peer are deleted in case of inactivity.
  inactivity={{ connitem.inactivity }}
{% endif %}
{% if connitem.reauth is defined %}
  # whether rekeying of an IKE_SA should also reauthenticate the peer.
  reauth={{ connitem.reauth }}
{% endif %}
{% if connitem.closeaction is defined %}
  # defines the action to take if the remote peer unexpectedly closes a CHILD_SA
  closeaction={{ connitem.closeaction }}
{% endif %}
{% if connitem.left is defined  %}
  # The IP address of the participant's public-network interface or one of several magic values.
  left={{ connitem.left }}
{% endif %}
{% if connitem.leftsubnet is defined  %}
  # Private subnet behind the participant, expressed as network/netmask
  leftsubnet={{ connitem.leftsubnet }}
{% endif %}
{% if connitem.leftid is defined  %}
  # How the participant should be identified for authentication
  leftid={{ connitem.leftid }}
{% endif %}
  # whether the participant is doing forwarding-firewalling (including masquerading) using iptables or traffic from other participant subnet, which should be turned off for traffic to the other subnet) once the connection is established  
{% if connitem.leftfirewall is defined  %}
  leftfirewall=yes
{% else %}
  leftfirewall=no
{% endif %}
{% if connitem.right is defined  %}
  # The IP address of the participant's public-network interface or one of several magic values.
  right={{ connitem.right }}
{% endif %}
{% if connitem.rightsubnet is defined  %}
  # Private subnet behind the participant, expressed as network/netmask
  rightsubnet={{ connitem.rightsubnet }}
{% endif %}
{% if connitem.rightid is defined  %}
  # How the participant should be identified for authentication
  rightid={{ connitem.rightid }}
{% endif %}
{% if connitem.ike is defined  %}
  # Comma-separated list of IKE/ISAKMP SA encryption/authentication algorithms to be used
  ike={{ connitem.ike }}
{% endif %}
{% if connitem.esp is defined  %}
  # Comma-separated list of ESP encryption/authentication algorithms to be used for the connection
  esp={{ connitem.esp }}
{% endif %}
{% if connitem.keyexchange is defined %}
  # Method of key exchange; which protocol should be used to initialize the connection.
  keyexchange={{ connitem.keyexchange }}
{% endif %}
{% if connitem.auto is defined  %}
  # What operation, if any, should be done automatically at IPsec startup.
  auto={{ connitem.auto }}
{% endif %}

{% endfor %}

